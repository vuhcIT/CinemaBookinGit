!function(g){"use strict";var x={init:function(){this.mb_popup_showtime(),this.cart_seat(),this.cart_total(),this.cart_price_incl_tax(),this.cart_next(),this.countdown_checkout(),this.mb_trailer_video_popup(),this.mb_trailer_video_popup_for_slick()},mb_popup_showtime:function(){function i(a){var e;null!=a&&(e=a.closest("#mb_booking_popup"),a.on("click",function(t){t.preventDefault(),a.closest("#mb_booking_popup").hide(),a.closest("#mb_booking_popup").find(".mb-bp-content").hide()}),g(window).click(function(t){e.is(t.target)&&(a.closest("#mb_booking_popup").hide(),a.closest("#mb_booking_popup").find(".mb-bp-content").hide())}))}function r(t){null!=t&&t.on("click",function(t){t.preventDefault(),g(this).closest(".toggle-tabs").find("li").removeClass("current"),g(this).closest("li").addClass("current");t=g(this).closest("li").index();g(this).closest(".mb-showtimes").children("dl.collateral-tabs").children("dt.tab").removeClass("current"),g(this).closest(".mb-showtimes").children("dl.collateral-tabs").children("dd.tab-container").removeClass("current"),g(this).closest(".mb-showtimes").children("dl.collateral-tabs").children("dt.tab").eq(t).addClass("current"),g(this).closest(".mb-showtimes").children("dl.collateral-tabs").children("dd.tab-container").eq(t).addClass("current")})}function c(t){null!=t&&t.on("click",function(t){t.preventDefault(),g(this).closest(".toggle-tabs").find("li").removeClass("current"),g(this).closest("li").addClass("current");t=g(this).index();g(this).closest(".mb-room-types").children("dl.collateral-tabs").children("dt.tab").removeClass("current"),g(this).closest(".mb-room-types").children("dl.collateral-tabs").children("dd.tab-container").removeClass("current"),g(this).closest(".mb-room-types").children("dl.collateral-tabs").children("dt.tab").eq(t).addClass("current"),g(this).closest(".mb-room-types").children("dl.collateral-tabs").children("dd.tab-container").eq(t).addClass("current")})}g(".btn-booking").on("click",function(t){t.preventDefault();var t=g(this).data("movie-id"),a=g(".mb_booking_popup .mb-bp-container .mb-close");a.hide(),g(".mb_booking_popup").show(),g(".mb_booking_popup .mb-spinner").show(),g.post(ajax_object.ajax_url,{action:"mb_popup_showtime",data:{ajax_nonce:ajax_object.ajax_nonce,movie_id:t}},function(t){g(".mb_booking_popup .mb-bp-container .mb-bp-content").show(),g(".mb_booking_popup .mb-spinner").hide(),g(".mb_booking_popup .mb-bp-container .mb-bp-content").html("").append(t),a.css("display","flex"),i(a);t=g(".mb_booking_popup .mb-bp-container .mb-bp-content .mb-date-tabs .day");null!=(t=t)&&t.on("click",function(t){t.preventDefault();var a=g(this).data("date"),t=g(this).closest("#mb_booking_popup").find('input[name="movie_id"]').val();g(this).closest(".mb-date-tabs").find("li").removeClass("current"),g(this).closest("li").addClass("current"),g(".mb_booking_popup .mb-spinner").show(),g(this).closest("#mb_booking_popup").find(".mb-bp-content .mb-showtimes").html(""),g(this).closest("#mb_booking_popup").find(".mb-bp-content dt.tab").removeClass("current"),g(this).closest("#mb_booking_popup").find(".mb-bp-content dd.tab-container").removeClass("current");var e=g(this).closest("#mb_booking_popup").find('.mb-bp-content dt.tab[data-date="'+a+'"]').addClass("current").next("dd.tab-container").addClass("current");g.post(ajax_object.ajax_url,{action:"mb_get_showtimes",data:{ajax_nonce:ajax_object.ajax_nonce,movie_id:t,date:a}},function(t){g(".mb_booking_popup .mb-spinner").hide(),e.html("").append(t),i(g(".mb_booking_popup .mb-bp-container .mb-close")),r(g(".mb_booking_popup .mb-bp-container .mb-bp-content .collateral-tabs .mb-city-name")),c(g(".mb_booking_popup .mb-bp-container .mb-bp-content .collateral-tabs .mb-room-type-name"))})}),r(g(".mb_booking_popup .mb-bp-container .mb-bp-content .collateral-tabs .mb-city-name")),c(g(".mb_booking_popup .mb-bp-container .mb-bp-content .collateral-tabs .mb-room-type-name"))})})},cart_seat:function(){const _={KEY:"",contents:[],init:function(){_.get_key_cart();var t=localStorage.getItem(_.KEY);t?_.contents=JSON.parse(t):_.add_store()},add_store:function(){var t=JSON.stringify(_.contents);localStorage.setItem(_.KEY,t)},map_add_item:function(a,t,e=null){let i={id:a,price:t};parseInt(e)&&(i.qty=e),_.check_item(a)?_.contents=_.contents.map(function(t){if(t.id===a)return t}):_.contents.push(i),_.add_store()},update_area:function(a,e,i){_.contents=_.contents.map(function(t){return t.id===a&&(t[e]=i),t}),_.add_store()},remove:function(a){_.contents=_.contents.filter(function(t){if(t.id!==a)return!0}),_.add_store()},get_key_cart:function(){var t=g('.cart_detail input[name="cart-data"]').data("sid"),a=g('.cart_detail input[name="cart-data"]').data("rid");t&&a&&(_.KEY=t+"_"+a,Cookies.set("showtime_id",t),Cookies.set("room_id",a))},check_item:function(a){var t=_.contents.filter(function(t){return t.id==a});return!(!t||!t[0])&&t[0]},seat_map:function(){var n=g(document).find('.cart_detail input[name="data-seat"]').data("seat"),r=(r=g(document).find('.cart_detail input[name="data-seat"]').data("seat-booked"))||[],o=[],f=[],s=t(n=n||[]),d=g(document).find('.cart_detail input[name="data-area"]').data("area"),l=(l=g(document).find('.cart_detail input[name="data-area"]').data("area-outofstock"))||[],p=[],h=[],v=[],m=t(d=d||[]),y=g('.cart_detail input[name="cart-data"]').data("sid"),k=g('.cart_detail input[name="cart-data"]').data("rid");function u(){let t,a=0,e=0,i=0;for(let t=f.length-1;0<=t;t--)a+=x.cart_price_incl_tax(parseFloat(f[t]));for(let t=h.length-1;0<=t;t--)e+=x.cart_price_incl_tax(parseFloat(h[t])*parseInt(v[t]));t=parseFloat(a)+parseFloat(e);var r=g('.cart_detail input[name="cart-data"]').data("tax-fee"),c=g('.cart_detail input[name="cart-data"]').data("tax-type"),r=r||0,n=g('.cart_detail input[name="cart-data"]').data("ticket-fee"),o=g('.cart_detail input[name="cart-data"]').data("ticket-fee-type"),n=n||0,s=g(".cart_detail .wp-seat-info").children("span").length;parseInt(s)?(i+=parseInt(s),g(".cart_detail .cart-sidebar .wp-content-item .item-info.item-info-map").css("display","flex"),g(".cart_detail .cart-sidebar .wp-content-item .item-info.item-info-map").attr("data-qty",s),g(".cart_detail .cart-sidebar .wp-content-item .item-info.item-info-map").attr("data-price",a),g(".cart_detail .cart-sidebar .wp-content-item .item-info-map .info-sub-price").html(x.cart_total(a))):(g(".cart_detail .cart-sidebar .wp-content-item .item-info.item-info-map").css("display","none"),g(".cart_detail .cart-sidebar .wp-content-item .item-info.item-info-map").attr("data-qty",0),g(".cart_detail .cart-sidebar .wp-content-item .item-info.item-info-map").attr("data-price",0),g(".cart_detail .cart-sidebar .wp-content-item .item-info-map .info-sub-price").html(x.cart_total(0))),g(".cart_detail .cart-sidebar .wp-content-item .item-info.area-item").each(function(){var t=g(this).attr("data-qty");parseInt(t)&&(i+=parseInt(t))});s=JSON.parse(localStorage.getItem(y+"_"+k));let d=0;r&&("percent"===c&&(d=parseFloat(r)*t/100),"amount"===c&&(d=parseFloat(r))),g(".cart_detail .cart-sidebar .tax-number").empty().html("+"+x.cart_total(d)),g(".cart_detail .cart-sidebar .tax-number").attr("data-tax",d);let l=0;g.isArray(s)&&s.length&&n&&("percent"===o&&(l=parseFloat(n)*t/100),"amount"===o&&(l=parseFloat(n),l*=i)),g(".cart_detail .cart-sidebar .ticket-fee-number").empty().html("+"+x.cart_total(l)),g(".cart_detail .cart-sidebar .ticket-fee-number").attr("data-ticket-fee",l),g(".cart_detail .cart-sidebar .total-price").html(x.cart_total(t+d+l)),g.isArray(s)&&s.length?(g(".cart_detail .cart-sidebar .placeholder").hide(),g(".cart_detail .cart-sidebar .cart-error").hide(),g(".cart_detail .cart-sidebar .wp-content-item").show(),g(".cart_detail .cart-sidebar .item-info.item-header").css("display","flex"),d?g(".cart_detail .cart-sidebar .total-tax").css("display","flex"):g(".cart_detail .cart-sidebar .total-tax").hide(),l?g(".cart_detail .cart-sidebar .ticket-fee").css("display","flex"):g(".cart_detail .cart-sidebar .ticket-fee").hide(),g(".cart_detail .cart-sidebar .total-cart-info").attr("data-total",t+d+l),g(".cart_detail .cart-sidebar .cart-checkout").removeClass("mb-disable")):(g(".cart-info .placeholder").show(),g(".cart_detail .cart-sidebar .wp-content-item").hide(),g(".cart_detail .cart-sidebar .item-info.item-header").hide(),g(".cart_detail .cart-sidebar .total-tax").hide(),g(".cart_detail .cart-sidebar .ticket-fee").hide(),g(".cart_detail .cart-sidebar .total-cart-info").attr("data-total",0),g(".cart_detail .cart-sidebar .total-price").html(x.cart_total(0)),g(".cart_detail .cart-sidebar .cart-checkout").addClass("mb-disable"))}function t(t=null){if(!t||0==t.length)return[];for(var a="",e=t.length-1;0<=e;e--)a+=0==e?t[e].id:t[e].id+", ";return a&&(a=a.split(","),g.isArray(a)&&(a=g.map(a,function(t){return t.replace(/ /g,"").trim()}))),a}function i(t){let a=0,e=0,i=0,r=0;for(let t=f.length-1;0<=t;t--)e+=x.cart_price_incl_tax(parseFloat(f[t]));for(let t=h.length-1;0<=t;t--)i+=x.cart_price_incl_tax(parseFloat(h[t])*parseInt(v[t]));a=parseFloat(e)+parseFloat(i);var c=g('.cart_detail input[name="cart-data"]').data("tax-fee"),n=g('.cart_detail input[name="cart-data"]').data("tax-type"),c=c||0,o=g('.cart_detail input[name="cart-data"]').data("ticket-fee"),s=g('.cart_detail input[name="cart-data"]').data("ticket-fee-type"),o=o||0,d=g(".cart_detail .wp-seat-info").children("span").length;parseInt(d)&&(r+=parseInt(d)),g(".cart_detail .cart-sidebar .wp-content-item .item-info.area-item").each(function(){var t=g(this).attr("data-qty");parseInt(t)&&(r+=parseInt(t))});var l,p,m,u=JSON.parse(localStorage.getItem(y+"_"+k));t?(l=(p=JSON.parse(t)).type,m=p.value,t=p.code,p=0,m=m||0,"percent"==l&&(p=parseFloat(m)*a/100,a-=p),"amount"==l&&(p=parseFloat(m),a-=p),g(".cart_detail .cart-sidebar .discount-number").empty().html("-"+x.cart_total(p)),g(".cart_detail .cart-sidebar .discount-number").attr("data-discount",p),g(".cart_detail .cart-sidebar .discount-number").attr("data-discount-code",t),g(".cart_detail .cart-sidebar .discount-number").attr("data-discount-value",m),g(".cart_detail .cart-sidebar .discount-number").attr("data-discount-type",l),g(".cart_detail .cart-sidebar .total-discount").css("display","flex")):(g(".cart_detail .cart-sidebar .discount-number").empty(),g(".cart_detail .cart-sidebar .discount-number").attr("data-discount",0),g(".cart_detail .cart-sidebar .discount-number").attr("data-discount-code",""),g(".cart_detail .cart-sidebar .discount-number").attr("data-discount-value",""),g(".cart_detail .cart-sidebar .discount-number").attr("data-discount-type",""),g(".cart_detail .cart-sidebar .total-discount").hide());let _=0;c&&("percent"===n&&(_=parseFloat(c)*a/100),"amount"===n&&(_=parseFloat(c))),g(".cart_detail .cart-sidebar .tax-number").empty().html("+"+x.cart_total(_)),g(".cart_detail .cart-sidebar .tax-number").attr("data-tax",_);let b=0;g.isArray(u)&&u.length&&o&&("percent"===s&&(b=parseFloat(o)*a/100),"amount"===s&&(b=parseFloat(o),b*=d)),g(".cart_detail .cart-sidebar .ticket-fee-number").empty().html("+"+x.cart_total(b)),g(".cart_detail .cart-sidebar .ticket-fee-number").attr("data-ticket-fee",b),g.isArray(u)&&u.length?(g(".cart_detail .cart-sidebar .total-price").html(x.cart_total(a+_+b)),g(".cart_detail .cart-sidebar .total-cart-info").attr("data-total",a+_+b)):(g(".cart_detail .cart-sidebar .total-price").html(x.cart_total(0)),g(".cart_detail .cart-sidebar .total-cart-info").attr("data-total",0))}"undefined"!=typeof ImageMapPro&&(ImageMapPro.subscribe(t=>{"mapInit"===t.type&&function(){ImageMapPro.isMobile()||g(document).find(".cart_detail .imp-fullscreen-button").hide();g("#mb_cart .mb-seat-map .imp-objects .imp-object:not(.booked)").each(function(){var t=g(this).data("title");g.isArray(s)&&-1==g.inArray(t,s)&&g.isArray(m)&&-1==g.inArray(t,m)&&(r.push(t),g(this).addClass("booked"))});g(".cart_detail .cart-sidebar .wp-content-item").empty().html('<div class="item-info item-info-map"><div class="info-type-ticket"><div class="wp-seat-info"></div></div><div class="info-sub-price"></div></div>');for(var t=r.length-1;0<=t;t--)for(var a=n.length-1;0<=a;a--)-1!==n[a].id.indexOf(r[t])&&(g(document).find('.imp-objects .imp-object[data-title="'+r[t]+'"]').addClass("booked"),_.remove(r[t]));for(t=l.length-1;0<=t;t--)for(a=d.length-1;0<=a;a--)-1!==d[a].id.indexOf(l[t])&&(g(document).find('.imp-objects .imp-object[data-title="'+l[t]+'"]').addClass("booked"),_.remove(l[t]));var e=JSON.parse(localStorage.getItem(y+"_"+k));g.isArray(e)&&e.length?(g(".cart_detail .cart-sidebar .wp-content-item").css("display","block"),g(".cart_detail .cart-sidebar .item-info.item-header").css("display","flex"),g(".cart_detail .cart-sidebar .total-tax").css("display","flex"),g(".cart_detail .cart-sidebar .cart-info .placeholder").css("display","none")):(g(".cart_detail .cart-sidebar .wp-content-item").css("display","none"),g(".cart_detail .cart-sidebar .item-info.item-header").css("display","none"),g(".cart_detail .cart-sidebar .total-tax").css("display","none"),g(".cart_detail .cart-sidebar .ticket-fee").css("display","none"),g(".cart_detail .cart-sidebar .cart-info .placeholder").css("display","block"));for(a=0;a<e.length;a++){var i;-1!==g.inArray(e[a].id,s)&&-1==g.inArray(e[a].id,o)&&(o.push(e[a].id),f.push(e[a].price),g(document).find('.imp-objects .imp-object[data-title="'+e[a].id+'"]').attr("selected","selected").addClass("selected"),i='<span class="seat-'+a+'">'+e[a].id+"</span>",g(".cart_detail .cart-sidebar .wp-content-item .wp-seat-info").append(i)),-1!==g.inArray(e[a].id,m)&&-1==g.inArray(e[a].id,p)&&(p.push(e[a].id),h.push(e[a].price),v.push(e[a].qty),g(document).find('.imp-objects .imp-object[data-title="'+e[a].id+'"]').attr("selected","selected").addClass("selected"),i='<div class="item-info area-item area-id-'+e[a].id+'" data-qty="'+e[a].qty+'" data-price="'+x.cart_price_incl_tax(parseFloat(e[a].price))*parseInt(e[a].qty)+'">',i+='<div class="info-type-ticket">',i+='<span class="area-name">'+e[a].id+"</span>",i+="</div>",i+='<div class="info-qty-ticket">',i+='<span class="area-minus">',i+='<i aria-hidden="true" class="flaticon-minus"></i>',i+="</span>",i+='<span class="area-qty">'+e[a].qty+"</span>",i+='<span class="area-plus">',i+='<i aria-hidden="true" class="flaticon-plus"></i>',i+="</span>",i+="</div>",i+='<div class="info-sub-price">'+x.cart_total(x.cart_price_incl_tax(parseFloat(e[a].price))*parseInt(e[a].qty))+"</div>",i+="</div>",g(".cart_detail .cart-sidebar .wp-content-item").append(i))}u()}()}),ImageMapPro.subscribe(t=>{"objectClick"===t.type&&function(c){{if(g(".cart_detail .cart-content .mb-seat-map .mb-cart-error").hide(),g(".cart_detail .cart-content .mb-seat-map .mb-cart-error .mb-error").hide(),-1!==g.inArray(c,r))return g(".cart_detail .cart-content .mb-seat-map .mb-cart-error").show(),g(".cart_detail .cart-content .mb-seat-map .seat-error").show();if(-1!==g.inArray(c,l))return g(".cart_detail .cart-content .mb-seat-map .mb-cart-error").show(),g(".cart_detail .cart-content .mb-seat-map .area-error").show();g(document).find('.imp-objects .imp-object[data-title="'+c+'"]').off("click").one("click touchstart",function(){var e,t=g(this);if(t.hasClass("selected")){if(t.removeClass("selected").removeAttr("selected"),g(document).find('.imp-objects .imp-object[data-title="'+c+'"]').removeClass("selected").removeAttr("selected"),-1!==g.inArray(c,s))for(let t=o.length-1;0<=t;t--)c==o[t]&&(o.splice(t,1),f.splice(t,1),g(document).find(".cart_detail .wp-seat-info span:nth-child("+(t+1)+")").remove(),_.remove(c));if(-1!==g.inArray(c,m))for(let t=p.length-1;0<=t;t--)c==p[t]&&(p.splice(t,1),h.splice(t,1),v.splice(t,1),g(document).find(".cart_detail .cart-sidebar .wp-content-item .area-id-"+c).remove(),_.remove(c))}else{if(t.attr("selected","selected").addClass("selected"),g(document).find('.imp-objects .imp-object[data-title="'+c+'"]').attr("selected","selected").addClass("selected"),-1!==g.inArray(c,s)){var i,r=g(".cart_detail .wp-seat-info").children("span").length;for(let a=0;a<n.length;a++){let t;t=n[a].id.split(","),t=t.filter(function(t){return null!=t&&""!=t&&" "!=t}),t=t.map(function(t){return t.trim()}),"-1"!=t.indexOf(c)&&(o.push(c),f.push(n[a].price),i='<span class="seat-'+r+'">'+c+"</span>",g(".cart_detail .cart-sidebar .wp-seat-info").append(i),_.map_add_item(c,n[a].price))}}if(-1!==g.inArray(c,m))for(let a=0;a<d.length;a++){let t;t=d[a].id,t&&t.trim(),t===c&&(p.push(c),h.push(d[a].price),v.push(1),e='<div class="item-info area-item area-id-'+c+'" data-qty="1" data-price="'+x.cart_price_incl_tax(parseFloat(d[a].price))+'">',e+='<div class="info-type-ticket">',e+='<span class="area-name">'+c+"</span>",e+="</div>",e+='<div class="info-qty-ticket">',e+='<span class="area-minus">',e+='<i aria-hidden="true" class="flaticon-minus"></i>',e+="</span>",e+='<span class="area-qty">1</span>',e+='<span class="area-plus">',e+='<i aria-hidden="true" class="flaticon-plus"></i>',e+="</span>",e+="</div>",e+='<div class="info-sub-price">'+x.cart_total(x.cart_price_incl_tax(parseFloat(d[a].price)))+"</div>",e+="</div>",g(".cart_detail .cart-sidebar .wp-content-item").append(e),_.map_add_item(c,d[a].price,1))}}u()})}g(".cart_detail .cart-sidebar .cart-discount .form-discount #cart-discount-close").click()}(t.payload.object)})),g(document).on("click",".wp-content-item .area-plus",function(t){if(t.preventDefault(),g(this).hasClass("disable"))return!1;g(".cart_detail .cart-sidebar .cart-discount .form-discount #cart-discount-close").click(),g(".cart_detail .cart-content .mb-cart-error").hide(),g(".cart_detail .cart-content .mb-cart-error .mb-error").hide();var a=g(this).closest(".area-item").find(".area-name").text();g(this).closest(".area-item").attr("data-qty");let e=JSON.parse(localStorage.getItem(y+"_"+k));if(0<e.length)for(var i=p.indexOf(a),r=0;r<e.length;r++)e[r].id===a&&-1!==i&&(e[r].qty+=1,v[i]+=1,g(this).closest(".area-item").attr("data-qty",e[r].qty),g(this).closest(".area-item").attr("data-price",x.cart_price_incl_tax(parseFloat(e[r].price))*parseInt(e[r].qty)),g(this).closest(".area-item").find(".area-qty").text(e[r].qty),g(this).closest(".area-item").find(".info-sub-price").text(x.cart_total(x.cart_price_incl_tax(parseFloat(e[r].price))*parseInt(e[r].qty))),_.update_area(a,"qty",e[r].qty),u())}),g(document).on("click",".wp-content-item .area-minus",function(t){if(t.preventDefault(),g(this).hasClass("disable"))return!1;g(".cart_detail .cart-sidebar .cart-discount .form-discount #cart-discount-close").click(),g(".cart_detail .cart-content .mb-cart-error").hide(),g(".cart_detail .cart-content .mb-cart-error .mb-error").hide();var a=g(this).closest(".area-item").find(".area-name").text();g(this).closest(".area-item").attr("data-qty");let e=JSON.parse(localStorage.getItem(y+"_"+k));if(0<e.length)for(var i=0;i<e.length;i++){var r=p.indexOf(a);e[i].id===a&&-1!==r&&(1<parseInt(e[i].qty)?(--e[i].qty,--v[r],g(this).closest(".area-item").attr("data-qty",e[i].qty),g(this).closest(".area-item").attr("data-price",x.cart_price_incl_tax(parseFloat(e[i].price))*parseInt(e[i].qty)),g(this).closest(".area-item").find(".area-qty").text(e[i].qty),g(this).closest(".area-item").find(".info-sub-price").text(x.cart_total(x.cart_price_incl_tax(parseFloat(e[i].price))*parseInt(e[i].qty))),_.update_area(a,"qty",e[i].qty)):(g(".wp-content-item .area-id-"+a).remove(),g(document).find('.imp-objects .imp-object[data-title="'+a+'"]').removeClass("selected").removeAttr("selected"),p.splice(r,1),h.splice(r,1),v.splice(r,1),_.remove(a)),u())}}),g(".cart_detail .cart-sidebar .cart-discount .cart-discount-btn").on("click",function(t){t.preventDefault();t=g(this);t.hide(),t.closest(".cart-discount").find(".form-discount").css("display","flex"),t.closest(".cart-discount").find(".form-discount .input-discount-code input.discount-code").val("")}),g(".cart_detail .cart-sidebar .cart-discount .form-discount #cart-discount-close").on("click",function(t){t.preventDefault(),g(this).closest(".cart-discount").find(".form-discount").hide(),g(this).closest(".cart-discount").find(".cart-discount-btn").show(),g(this).closest(".form-discount").find(".input-discount-code i").hide(),g(this).closest(".form-discount").find(".error").hide(),g(this).closest(".form-discount").find(".input-discount-code input.discount-code").val(""),i(!1)}),g(".cart_detail .cart-sidebar .cart-discount .form-discount .cart-discount-submit-code").on("click",function(t){t.preventDefault();var a=g(this),e=a.closest(".form-discount").find(".input-discount-code input.discount-code").val(),t=a.data("movie-id");a.closest(".form-discount").find(".input-discount-code i").show(),a.closest(".form-discount").find(".error").hide(),g.post(ajax_object.ajax_url,{action:"mb_check_discount",data:{ajax_nonce:ajax_object.ajax_nonce,discountCode:e,movieID:t}},function(t){t||a.closest(".form-discount").find(".error").show(),i(t),a.closest(".form-discount").find(".input-discount-code i").hide()})})}};_.init(),_.seat_map()},cart_total:function(t){var a=g('.cart_detail input[name="cart-data"]').data("currency-settings");if(a){var e=a.currency||"$",i=a.decimal_separator||".",r=a.thousand_separator||",",c=a.number_decimals||0;switch(t=(t=(t=parseFloat(t).toFixed(parseInt(c))).toString().replace(".",i)).toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1"+r),a.currency_position){case"left":t=e+t;break;case"left_space":t=e+" "+t;break;case"right":t+=e;break;case"right_space":t=t+" "+e;break;default:t=e+t}return t}},cart_price_incl_tax:function(t){var a=t,e=g('.cart_detail input[name="cart-data"]').data("tax-fee"),i=g('.cart_detail input[name="cart-data"]').data("tax-type"),r=g('.cart_detail input[name="cart-data"]').data("tax-incl");return e&&"yes"==r&&("percent"===i&&(r=1+parseFloat(e)/100,a=t-parseFloat(e)/100/r*t),"amount"===i&&(a=t-parseFloat(e))),a},cart_next:function(){g(".cart_detail .cart-sidebar #mb-btn-checkout").on("click",function(t){t.preventDefault();var a=g(this);if(a.hasClass("mb-disable"))return!1;var e,i,r,c,n,o,s,d,l,p,m=0,u=g(".cart_detail .cart-sidebar .wp-content-item .item-info.item-info-map").data("qty");parseInt(u)&&(m+=parseInt(u)),g(".cart_detail .cart-sidebar .wp-content-item .item-info.area-item").each(function(){var t=g(this).attr("data-qty");parseInt(t)&&(m+=parseInt(t))}),m?(e=0,p=g(".cart_detail .cart-sidebar .wp-content-item .item-info.item-info-map").data("price"),parseFloat(p)&&(e+=parseFloat(p)),g(".cart_detail .cart-sidebar .wp-content-item .item-info.area-item").each(function(){var t=g(this).attr("data-price");parseFloat(t)&&(e+=parseFloat(t))}),i=a.find("#mb_checkout_nonce").val(),a.find(".submit-load-more").css("z-index",1),n="",r=g('.cart_detail input[name="cart-data"]').data("sid"),c=g('.cart_detail input[name="cart-data"]').data("rid"),n=JSON.parse(localStorage.getItem(r+"_"+c)),o=g(".cart_detail .cart-sidebar .content-cart-info .total-discount .discount-number").data("discount"),s=g(".cart_detail .cart-sidebar .content-cart-info .total-discount .discount-number").data("discount-code"),d=g(".cart_detail .cart-sidebar .content-cart-info .total-discount .discount-number").data("discount-value"),l=g(".cart_detail .cart-sidebar .content-cart-info .total-discount .discount-number").data("discount-type"),t=g(".cart_detail .cart-sidebar .content-cart-info .total-tax .tax-number").data("tax"),u=g(".cart_detail .cart-sidebar .content-cart-info .ticket-fee .ticket-fee-number").data("ticket-fee"),p=g(".cart_detail .cart-sidebar .total-cart-info").data("total"),g.post(ajax_object.ajax_url,{action:"mb_process_checkout",data:{checkout_nonce:i,showtime_id:r,room_id:c,cart:n,qty:m,subtotal:e,discount:o,discount_code:s,discount_value:d,discount_type:l,tax:t,ticket_fee:u,total:p}},function(t){var a,e;t&&((t=(a=JSON.parse(t)).mb_message)?(g(".cart_detail .cart-sidebar .cart-error").html(t).css("display","block"),g(".cart_detail .cart-sidebar .submit-load-more").css("z-index",-1),a.mb_reload&&(localStorage.removeItem(r+"_"+c),g(".cart_detail .cart-sidebar .cart-checkout").addClass("mb-disable"),e=10,g(".cart_detail .cart-sidebar .message-error").show().find(".mb-auto-reload").html(a.mb_reload),setInterval(function(){e--,g(".cart_detail .cart-sidebar .message-error .mb-auto-reload .time").html(e),0===e&&location.reload()},1e3))):(localStorage.removeItem(r+"_"+c),window.location.href=a.url))})):a.closest(".cart-sidebar").find(".cart-error").css("display","block")})},countdown_checkout:function(){0<g(".countdown-checkout").length&&g(".countdown-checkout").each(function(){var t,a,e,i=g(this),r=i.data("time-countdown-checkout"),c=i.data("redirect"),n=i.data("countdown-checkout-nonce"),o=i.data("booking-id"),s=i.data("movie-id"),d=i.data("showtime-id"),l=i.data("room-id"),p=d&&s?d+"_"+l:"";0==r?g.post(ajax_object.ajax_url,{action:"mb_countdown_checkout",data:{checkout_nonce:n,booking_id:o,movie_id:s,showtime_id:d,room_id:l}},function(t){"success"==t&&(localStorage.removeItem(p),window.location.href=c)}):(t=Math.floor(r/60),a=parseInt(r%60),e=setInterval(function(){t=--a<0?--t:t,a=(a=a<0?59:a)<10?"0"+a:a,t=t<10?"0"+t:t,i.find(".time").html(t+":"+a),t=parseInt(t),(a=parseInt(a))<=0&&t<=0&&(clearInterval(e),g.post(ajax_object.ajax_url,{action:"mb_countdown_checkout",data:{checkout_nonce:n,booking_id:o,movie_id:s,showtime_id:d,room_id:l}},function(t){"success"==t&&(localStorage.removeItem(p),window.location.href=c)}))},1e3))})},mb_trailer_video_popup:function(){g(".btn-trailer-video").on("click",function(t){t.preventDefault();var t=g(this).data("movie-id"),a=g(".mb_trailer_video_popup"),e=a.find(".modal-content"),i=a.find(".ovaicon-cancel");g.post(ajax_object.ajax_url,{action:"mb_get_trailer",data:{ajax_nonce:ajax_object.ajax_nonce,movie_id:t}},function(t){e.html("").append(t),a.css("display","flex"),i.on("click",function(){a.hide(),e.html("")}),g(window).click(function(t){"mb_trailer_video_popup"==t.target.className&&(a.hide(),e.html(""))})})})},mb_trailer_video_popup_for_slick:function(){g(".mb-movie-trailer-slider").on("click",".btn-trailer-video",function(t){t.preventDefault();var t=g(this).data("movie-id"),a=g(".mb_trailer_video_popup"),e=a.find(".modal-content"),i=a.find(".ovaicon-cancel");g.post(ajax_object.ajax_url,{action:"mb_get_trailer",data:{ajax_nonce:ajax_object.ajax_nonce,movie_id:t}},function(t){e.html("").append(t),a.css("display","flex"),i.on("click",function(){a.hide(),e.html("")}),g(window).click(function(t){"mb_trailer_video_popup"==t.target.className&&(a.hide(),e.html(""))})})})}};g(document).ready(function(){x.init(),window.MB_Frontend=x})}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,